<application>
  <component name="AppStorage">
    <histories>
      <item value="@description This function reprojects textures between cubemap, equirectangular and octahedral formats. The function can read and write textures with pixel data in RGBE, RGBM, linear and sRGB formats. When specularPower is specified it will perform a phong-weighted convolution of the source (for generating a gloss maps)." />
      <item value="read scanline width specifier" />
      <item value="check first scanline width to determine whether the file is RLE" />
      <item value="RGBE can't be filtered, so mipmaps are out of the question! (unless we generated them ourselves)" />
      <item value="@description Clamps texture coordinate to the range 0 to 1." />
      <item value="@description Ignores the integer part of texture coordinates, using only the fractional part." />
      <item value="@description Transforms a 4-dimensional vector by a 4x4 matrix." />
      <item value="@description Each element is rounded up to the next largest integer." />
      <item value="@description Each element is rounded up or down to the nearest integer." />
      <item value="@description Sets the specified matrix to a viewing matrix derived from an eye point, a target point and an up vector. The matrix maps the target point to the negative z-axis and the eye point to the origin, so that when you use a typical projection matrix, the center of the scene maps to the center of the viewport. Similarly, the direction described by the up vector projected onto the viewing plane is mapped to the positive y-axis so that it points upward in the viewport. The up vector must not be parallel to the line of sight from the eye to the reference point." />
      <item value="@description An orthographic camera projection where the frustum shape is essentially a cuboid." />
      <item value="@description A perspective camera projection where the frustum shape is essentially pyramidal." />
      <item value="@description Marks the end of a block of rendering. This function should be called after a matching call to {@link GraphicsDeviceupdateBegin}. Calls to {@link GraphicsDeviceupdateBegin} and {@link GraphicsDeviceupdateEnd} must not be nested." />
      <item value="@description Marks the beginning of a block of rendering. Internally, this function binds the render target currently set on the device. This function should be matched with a call to {@link GraphicsDeviceupdateEnd}. Calls to {@link GraphicsDeviceupdateBegin}" />
      <item value="@description Marks the beginning of a block of rendering. Internally, this function binds the render target currently set on the device. This function should be matched" />
      <item value="@description Sets the specified render target on the device. If null is passed as a parameter, the back buffer becomes the current target for all rendering operations." />
      <item value="WebGL1 has different requirements for power of 2 images vs non power of 2 images so check if the image is a power of 2 in both dimensions." />
      <item value="No, it's not a power of 2. Turn of mips and set wrapping to clamp to edge" />
      <item value="@description No sorting is applied. Mesh instances are rendered in the same order they were added to a layer." />
      <item value="@description Right of view. Only used in stereo rendering." />
      <item value="@description Left of view. Only used in stereo rendering." />
      <item value="scissor" />
      <item value="@description Set the active scissor rectangle on the specified device." />
      <item value="@param {Vec4} [rect] - The normalized screen-space position (rect.x, rect.y) and size (rect.z, rect.w) of the rectangle. Default is [0, 0, 1, 1]." />
      <item value="Parametric Geometry" />
      <item value="Parametric Surfaces Geometry" />
      <item value="based on the brilliant article by @prideout https:prideout.netblogoldblogindex.html@p=44.html" />
      <item value="Calculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3." />
      <item value="Property to get and set the distance between the pivot point and camera Clamped between this.distanceMin and this.distanceMax" />
      <item value="description: 'Frames the entity or scene at the start of the application.&quot;'" />
      <item value="description: 'Entity for the camera to focus on. If blank, then the camera will use the whole scene'" />
      <item value="description: 'Higher value means that the camera will continue moving after the user has stopped dragging. 0 is fully responsive.'" />
      <item value="@param {Shader} shader - The shader to be used for drawing the rectangle. When calling from a custom post effect, pass the field {@link PostEffectshader}." />
      <item value="@param {VertexBuffer} vertexBuffer - The vertex buffer for the rectangle mesh. When calling from a custom post effect, pass the field {@link PostEffectvertexBuffer}." />
      <item value="@param {GraphicsDevice} device - The graphics device of the application." />
      <item value="@description Draw a screen-space rectangle in a render target. Primarily meant to be used in custom post effects based on {@link PostEffect}." />
      <item value="@param {pc.Vec4} rect - (Optional) The rect of the current camera. If not specified then it will default to [0,0,1,1]." />
      <item value="@param {pc.RenderTarget} outputTarget - The output render target. If null then this will be the screen." />
      <item value="@description Render the post effect using the specified inputTarget to the specified outputTarget." />
      <item value="@param {GraphicsDevice} graphicsDevice - The graphics device of the application." />
      <item value="@classdesc Base class for all post effects. Post effects take a a render target as input apply effects to it and then render the result to an output render target or the screen if no output is specified." />
      <item value="@description Clears the frame buffer of the currently set render target." />
      <item value="@param {boolean} [definition.useTransformFeedback] - Specifies that this shader outputs post-VS data to a buffer." />
      <item value="@param {object} definition.attributes - Object detailing the mapping of vertex shader attribute names to semantics SEMANTIC_. This enables the engine to match vertex buffer data as inputs to the shader." />
      <item value="@description Applies any changes made to the material's properties." />
      <item value="and {@link GraphicsDeviceupdateEnd} must not be nested." />
      <item value="Increment the revision" />
      <item value="@description Get (or create, if it doesn't already exist) a variable in the scope." />
      <item value="@description Sets the active shader to be used during subsequent draw calls." />
      <item value="Set the active index buffer object" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="358" />
        <entry key="ENGLISH" value="359" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1630315845101" />
  </component>
</application>