<application>
  <component name="AppStorage">
    <histories>
      <item value="Quality depends on the number of MSAA samples of the current render target." />
      <item value="aliasing" />
      <item value="anti" />
      <item value="anti-aliasing" />
      <item value="@property {number} alphaTest The alpha test reference value to control which fragments are written to the currently active render target based on alpha value. All fragments with an alpha value of less than the alphaTest reference value will be discarded. alphaTest defaults to 0 (all fragments pass)." />
      <item value="@classdesc A material determines how a particular mesh instance is rendered. It specifies the shader and render state that is set before the mesh instance is submitted to the graphics device." />
      <item value="toneMap: the type of tone mapping being applied in the shader. See {@link ScenetoneMapping} for the list of possible values." />
      <item value="fog: the type of fog being applied in the shader. See {@link Scenefog} for the list of possible values." />
      <item value="forceUv1: if UV1 (second set of texture coordinates) is required in the shader. Will be declared as &quot;vUv1&quot; and passed to the fragment shader." />
      <item value="For example, you may wish to render a depth or normal pass using textures assigned to the material, a reflection pass with simpler shaders and so on." />
      <item value="This function will receive an object with shader generator settings (based on current material and scene properties), that you can change and then return." />
      <item value="A custom function that will be called after all shader generator properties are collected and before shader code is generated." />
      <item value="@property {object} chunks Object containing custom shader chunks that will replace default ones." />
      <item value="conserving" />
      <item value="{@link SPECULAR_BLINN}: Energy-conserving Blinn-Phong." />
      <item value="Energy" />
      <item value="{@link SPECULAR_PHONG}: Phong without energy conservation. You should only use it as a backwards compatibility with older projects." />
      <item value="It is recommended that you leave this option enabled, although you may want to disable it in case when all reflection comes only from a few light sources, and you don't use an environment map, therefore having mostly black reflection." />
      <item value="conserve Energy" />
      <item value="specular Antialias" />
      <item value="@property {boolean} specularAntialias Enables Toksvig AA for mipmapped normal maps with specular." />
      <item value="Modulates" />
      <item value="@property {number} occludeSpecular Uses ambient occlusion to darken specularreflection. It's a hack, because real specular occlusion is view-dependent. However, it can be better than nothing." />
      <item value="@property {Texture|null} clearCoatGlossMap Monochrome clear coat glossiness map (default is null). If specified, will be multiplied by normalized 'clearCoatGlossiness' value andor vertex colors." />
      <item value="@property {number} anisotropy Defines amount of anisotropy. Requires {@link StandardMaterialenableGGXSpecular} is set to true." />
      <item value="@property {boolean} enableGGXSpecular Enables GGX specular. Also enables {@link StandardMaterialanisotropy} parameter to set material anisotropy." />
      <item value="detail" />
      <item value="@property {string} diffuseDetailMode Determines how the main (primary) and detail (secondary) diffuse maps are blended together. Can be:" />
      <item value="@property {boolean} diffuseTint Multiply main (primary) diffuse map andor diffuse vertex color by the constant diffuse value." />
      <item value="@property {Color} ambient The ambient color of the material. This color value is 3-component (RGB), where each component is between 0 and 1." />
      <item value="Most maps can use 3 types of input values in any combination: constant (color or number), mesh vertex colors and a texture. All enabled inputs are multiplied together." />
      <item value="It can approximate a wide variety of surface types and can simulate dynamic reflected light." />
      <item value="@classdesc A Standard material is the main, general purpose material that is most often used for rendering." />
      <item value="force change shader if the object uses a different variant of the same material" />
      <item value="Morphing" />
      <item value="Coverage" />
      <item value="set Alpha To Coverage" />
      <item value="Render directional shadows once for each camera (will reject more than 1 attempt in this function)" />
      <item value="Frustum" />
      <item value="@description Creates a new forward renderer object." />
      <item value="@classdesc The forward renderer render scene objects." />
      <item value="Generates and applies the lightmaps." />
      <item value="{@link BAKE_COLOR}: single color lightmap" />
      <item value="@param {Entity[]|null} nodes - An array of entities (with model or render components) to render lightmaps for. If not supplied, the entire scene will be baked." />
      <item value="prepare Shadow Casters" />
      <item value="@classdesc The lightmapper is used to bake scene lights into textures." />
      <item value="@param {GraphicsDevice} device - The grahpics device used by the lightmapper." />
      <item value="@param {Entity} root - The root entity of the scene." />
      <item value="@param {Scene} scene - The scene to lightmap." />
      <item value="@param {AssetRegistry} assets - Registry of assets to lightmap." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="265" />
        <entry key="ENGLISH" value="266" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1626060918972" />
  </component>
</application>