<application>
  <component name="AppStorage">
    <histories>
      <item value="WebGL1 has different requirements for power of 2 images vs non power of 2 images so check if the image is a power of 2 in both dimensions." />
      <item value="No, it's not a power of 2. Turn of mips and set wrapping to clamp to edge" />
      <item value="@description No sorting is applied. Mesh instances are rendered in the same order they were added to a layer." />
      <item value="@description Right of view. Only used in stereo rendering." />
      <item value="@description Left of view. Only used in stereo rendering." />
      <item value="scissor" />
      <item value="@description Set the active scissor rectangle on the specified device." />
      <item value="@param {Vec4} [rect] - The normalized screen-space position (rect.x, rect.y) and size (rect.z, rect.w) of the rectangle. Default is [0, 0, 1, 1]." />
      <item value="Parametric Geometry" />
      <item value="Parametric Surfaces Geometry" />
      <item value="based on the brilliant article by @prideout https:prideout.netblogoldblogindex.html@p=44.html" />
      <item value="Calculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3." />
      <item value="Property to get and set the distance between the pivot point and camera Clamped between this.distanceMin and this.distanceMax" />
      <item value="description: 'Frames the entity or scene at the start of the application.&quot;'" />
      <item value="description: 'Entity for the camera to focus on. If blank, then the camera will use the whole scene'" />
      <item value="description: 'Higher value means that the camera will continue moving after the user has stopped dragging. 0 is fully responsive.'" />
      <item value="@param {Shader} shader - The shader to be used for drawing the rectangle. When calling from a custom post effect, pass the field {@link PostEffectshader}." />
      <item value="@param {VertexBuffer} vertexBuffer - The vertex buffer for the rectangle mesh. When calling from a custom post effect, pass the field {@link PostEffectvertexBuffer}." />
      <item value="@param {GraphicsDevice} device - The graphics device of the application." />
      <item value="@description Draw a screen-space rectangle in a render target. Primarily meant to be used in custom post effects based on {@link PostEffect}." />
      <item value="@param {pc.Vec4} rect - (Optional) The rect of the current camera. If not specified then it will default to [0,0,1,1]." />
      <item value="@param {pc.RenderTarget} outputTarget - The output render target. If null then this will be the screen." />
      <item value="@description Render the post effect using the specified inputTarget to the specified outputTarget." />
      <item value="@param {GraphicsDevice} graphicsDevice - The graphics device of the application." />
      <item value="@classdesc Base class for all post effects. Post effects take a a render target as input apply effects to it and then render the result to an output render target or the screen if no output is specified." />
      <item value="@description Clears the frame buffer of the currently set render target." />
      <item value="@param {boolean} [definition.useTransformFeedback] - Specifies that this shader outputs post-VS data to a buffer." />
      <item value="@param {object} definition.attributes - Object detailing the mapping of vertex shader attribute names to semantics SEMANTIC_. This enables the engine to match vertex buffer data as inputs to the shader." />
      <item value="@description Applies any changes made to the material's properties." />
      <item value="and {@link GraphicsDeviceupdateEnd} must not be nested." />
      <item value="Increment the revision" />
      <item value="@description Get (or create, if it doesn't already exist) a variable in the scope." />
      <item value="@description Sets the active shader to be used during subsequent draw calls." />
      <item value="Set the active index buffer object" />
      <item value="If the texture is not already bound on the currently active texture unit, bind it" />
      <item value="@classdesc A material determines how a particular mesh instance is rendered. It specifies the shader and render state that is set before the mesh instance is submitted to the graphics device." />
      <item value="update Client Rect" />
      <item value="destroy Grab Pass" />
      <item value="@param {number} h - The height of the viewport in pixels." />
      <item value="@param {number} w - The width of the viewport in pixels." />
      <item value="@param {number} y - The pixel space y-coordinate of the bottom left corner of the viewport." />
      <item value="@param {number} x - The pixel space x-coordinate of the bottom left corner of the viewport." />
      <item value="@description Set the active rectangle for rendering on the specified device." />
      <item value="@param {number|number[]|Texture} data - The value for the specified parameter." />
      <item value="@param {string} name - The name of the parameter to set." />
      <item value="@description Sets a shader parameter on a material." />
      <item value="@description Retrieves the specified shader parameter from a material." />
      <item value="@property {StencilParameters|null} stencilFront Stencil parameters for front faces (default is null)." />
      <item value="variants" />
      <item value="Minimal options for Depth and Shadow passes" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="341" />
        <entry key="ENGLISH" value="342" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1628841211436" />
  </component>
</application>