<application>
  <component name="AppStorage">
    <histories>
      <item value="Increment the revision" />
      <item value="@description Get (or create, if it doesn't already exist) a variable in the scope." />
      <item value="@description Sets the active shader to be used during subsequent draw calls." />
      <item value="Set the active index buffer object" />
      <item value="If the texture is not already bound on the currently active texture unit, bind it" />
      <item value="@classdesc A material determines how a particular mesh instance is rendered. It specifies the shader and render state that is set before the mesh instance is submitted to the graphics device." />
      <item value="update Client Rect" />
      <item value="destroy Grab Pass" />
      <item value="@param {number} h - The height of the viewport in pixels." />
      <item value="@param {number} w - The width of the viewport in pixels." />
      <item value="@param {number} y - The pixel space y-coordinate of the bottom left corner of the viewport." />
      <item value="@param {number} x - The pixel space x-coordinate of the bottom left corner of the viewport." />
      <item value="@description Set the active rectangle for rendering on the specified device." />
      <item value="@param {number|number[]|Texture} data - The value for the specified parameter." />
      <item value="@param {string} name - The name of the parameter to set." />
      <item value="@description Sets a shader parameter on a material." />
      <item value="@description Retrieves the specified shader parameter from a material." />
      <item value="@property {StencilParameters|null} stencilFront Stencil parameters for front faces (default is null)." />
      <item value="variants" />
      <item value="Minimal options for Depth and Shadow passes" />
      <item value="Atlas" />
      <item value="Create an Entity with a point light component Make sure it lights both World and Front Layer" />
      <item value="A generic interface for representing an audio processing module. Examples include:" />
      <item value="vanilla" />
      <item value="For vanilla materials, the shader can only be set by the user" />
      <item value="@description Duplicates a Standard material. All properties are duplicated except textures where only the references are copied." />
      <item value="Duplicates a Standard material. All properties are duplicated except textures where only the references are copied." />
      <item value="used to apply parameters from this material into scope of uniforms, called internally by forward-renderer optional list of parameter names to be set can be specified, otherwise all parameters are set" />
      <item value="@description Applies any changes made to the material's properties." />
      <item value="@function @name Materialupdate @description Applies any changes made to the material's properties." />
      <item value="@property {number} slopeDepthBias Same as {@link MaterialdepthBias}, but also depends on the slope of the triangle relative to the camera." />
      <item value="@property {number} depthBias Offsets the output depth buffer value. Useful for decals to prevent z-fighting." />
      <item value="Stencil" />
      <item value="@property {Shader|null} shader The shader used by this material to render mesh instances (default is null)." />
      <item value="@property {boolean} depthTest If true, fragments generated by the shader of this material are only written to the current render target if they pass the depth test. If false, fragments generated by the shader of this material are written to the current render target regardless of what is in the depth buffer. Defaults to true." />
      <item value="@property {number} cull Controls how triangles are culled based on their face direction with respect to the viewpoint." />
      <item value="@property {boolean} blueWrite If true, the blue component of fragments generated by the shader of this material is written to the color buffer of the currently active render target. If false, the blue component will not be written. Defaults to true." />
      <item value="@property {number} blendType Controls how primitives are blended when being written to the currently active render target." />
      <item value="It can nicely soften edges of otherwise sharp alpha cutouts, but isn't recommended for large area semi-transparent surfaces." />
      <item value="Quality depends on the number of MSAA samples of the current render target." />
      <item value="aliasing" />
      <item value="anti" />
      <item value="anti-aliasing" />
      <item value="@property {number} alphaTest The alpha test reference value to control which fragments are written to the currently active render target based on alpha value. All fragments with an alpha value of less than the alphaTest reference value will be discarded. alphaTest defaults to 0 (all fragments pass)." />
      <item value="toneMap: the type of tone mapping being applied in the shader. See {@link ScenetoneMapping} for the list of possible values." />
      <item value="fog: the type of fog being applied in the shader. See {@link Scenefog} for the list of possible values." />
      <item value="forceUv1: if UV1 (second set of texture coordinates) is required in the shader. Will be declared as &quot;vUv1&quot; and passed to the fragment shader." />
      <item value="For example, you may wish to render a depth or normal pass using textures assigned to the material, a reflection pass with simpler shaders and so on." />
      <item value="This function will receive an object with shader generator settings (based on current material and scene properties), that you can change and then return." />
      <item value="A custom function that will be called after all shader generator properties are collected and before shader code is generated." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="311" />
        <entry key="ENGLISH" value="312" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1626684706841" />
  </component>
</application>