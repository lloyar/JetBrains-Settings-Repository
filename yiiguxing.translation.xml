<application>
  <component name="AppStorage">
    <histories>
      <item value="@description Render the application's scene. More specifically, the scene's {@link LayerComposition} is rendered by the application's {@link ForwardRenderer}." />
      <item value="@param {GraphicsDevice} [graphicsDevice] - The graphics device used to manage this layer composition. If it is not provided, a device is obtained" />
      <item value="@classdesc Layer Composition is a collection of {@link Layer} that is fed to {@link Scenelayers} to define rendering order." />
      <item value="Composition" />
      <item value="Layers are organized inside {@link LayerComposition} in a desired order." />
      <item value="@param {object} options - Object for passing optional arguments. These arguments are the same as properties of the Layer." />
      <item value="@classdesc Layer represents a renderable subset of the scene. It can contain a list of mesh instances, lights and cameras, their render settings and also defines custom callbacks before, after or during rendering." />
      <item value="@classdesc Layer represents a renderable subset of the scene. It can contain a list of mesh instances, lights and cameras, their render settings and also defines custom callbacks before, after or during rendering. Layers are organized inside {@link LayerComposition} in a desired order." />
      <item value="@property {Asset[]|number[]} materialAssets The material assets that will be used to render the meshes. Each material corresponds to the respective mesh instance." />
      <item value="@property {Asset|number} asset The render asset for the render component (only applies to type 'asset') - can also be an asset id." />
      <item value="geometry" />
      <item value="@classdesc Enables an Entity to render a {@link Mesh} or a primitive shape. This component attaches {@link MeshInstance} geometry to the Entity." />
      <item value="@param {object} [data] - The initialization data for the specific component type. Refer to each specific component's API reference page for details on valid values for this parameter." />
      <item value="This function is called internally in the application's main loop and does not need to be called explicitly." />
      <item value="sync Hierarchy" />
      <item value="Timing stats" />
      <item value="Depending on browser add the correct visibiltychange event and store the name of the hidden attribute in this._hiddenAttr." />
      <item value="@description Get the current application. In the case where there are multiple running applications, the function can get an application based on a supplied canvas id." />
      <item value="@description Get the current application. In the case where there are multiple running applications, the function can get an application based on a supplied canvas id. This" />
      <item value="this.tick = makeTick(this); Circular linting issue as makeTick and Application reference each other" />
      <item value="eslint-disable-next-line no-use-before-define" />
      <item value="bind tick function to current scope" />
      <item value="@classdesc Resource handler used for loading {@link Render} resources." />
      <item value="@param {StandardMaterial} defaultMaterial - The shared default material that is used in any place that a material is not specified." />
      <item value="enable if you want entity type script attributes to not be re-mapped when an entity is cloned" />
      <item value="revision" />
      <item value="Handles localization." />
      <item value="@description Handles localization." />
      <item value="@description Set to true to render the scene on the next iteration of the main loop." />
      <item value="@description The graphics device used by the application." />
      <item value="Clamps per-frame delta time to an upper bound. Useful since returning from a tab deactivation can generate huge values for dt, which can adversely affect game state." />
      <item value="tone mapping" />
      <item value="An Application represents and manages your PlayCanvas application." />
      <item value="removes skin instance from the cache. This decreases ref count, and when that reaches 0 it gets destroyed" />
      <item value="map of SkinInstances allowing those to be shared between render components (specifically a single glb with multiple render components) maps rootBone to an array of SkinInstanceCachedObject this allows to find if a skin instance already exists for a rootbone, and a specific skin" />
      <item value="returns already created skin instance from skin, for use on the rootBone ref count of existing skinInstance is increased" />
      <item value="Stop rendering {@link MeshInstance}s without removing them from the scene hierarchy." />
      <item value="Class used as an entry in the ref-counted skin instance cache" />
      <item value="map of SkinInstances allowing those to be shared between render components" />
      <item value="@classdesc Component Systems contain the logic and functionality to update all Components of a particular type." />
      <item value="@classdesc Allows an Entity to render a mesh or a primitive shape like a box, capsule, sphere, cylinder, cone etc." />
      <item value="Pass null to turn off hardware instancing." />
      <item value="@param {VertexBuffer|null} vertexBuffer - Vertex buffer to hold per-instance vertex data (usually world matrices)." />
      <item value="@param {VertexBuffer|null} vertexBuffer - Vertex buffer to hold per-instance vertex data (usually world matrices). Pass null to turn off hardware instancing." />
      <item value="@description Sets up {@link MeshInstance} to be rendered using Hardware Instancing." />
      <item value="Deprecated" />
      <item value="used to apply parameters from this mesh instance into scope of uniforms, called internally by forward-renderer" />
      <item value="a wrapper over settings parameter specifically for realtime baked lightmaps. This handles reference counting of lightmaps and releases them when no longer referenced" />
      <item value="this allows us to automatically release realtime baked lightmaps when mesh instances using them are destroyed" />
      <item value="cache of lightmaps internally created by baking using Lightmapper" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="119" />
        <entry key="ENGLISH" value="120" />
        <entry key="LATIN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1625556820815" />
  </component>
</application>